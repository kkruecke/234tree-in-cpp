Printing tree in pre order
50 23 15 10 17 20 30 27 37 40 70 60 51 55 62 69 90 79 80 87 92 97 100 
======================
Printing copy of tree
10 15 17 20 23 27 30 37 40 50 51 55 60 62 69 70 79 80 87 90 92 97 100 
======================
Printing tree in order, using lambda
10 15 17 20 23 27 30 37 40 50 51 55 60 62 69 70 79 80 87 90 92 97 100 
=======Tree Debug (PostOrder) Printer =====================

Two node:   address(0x1b06c20): key[0] = 10: parent[0x1b06ca0]->children[0]->keys[0] = 10 <-- is Leaf 

Three node: address(0x1b06de0): key[0] = 17: parent[0x1b06ca0]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1b06de0): key[1] = 20: parent[0x1b06ca0]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1b06ca0): key[0] = 15: parent[0x1b06da0]->children[0]->keys[0] = 15

Two node:   address(0x1b06e60): key[0] = 27: parent[0x1b06ea0]->children[0]->keys[0] = 27 <-- is Leaf 

Three node: address(0x1b06c60): key[0] = 37: parent[0x1b06ea0]->children[1]->keys[0] = 37 <-- is Leaf 

Three node: address(0x1b06c60): key[1] = 40: parent[0x1b06ea0]->children[1]->keys[1] = 40 <-- is Leaf 

Two node:   address(0x1b06ea0): key[0] = 30: parent[0x1b06da0]->children[1]->keys[0] = 30

Two node:   address(0x1b06da0): key[0] = 23: parent[ root ]->children[0]->keys[0] = 23

Three node: address(0x1b06ce0): key[0] = 51: parent[0x1b06d60]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1b06ce0): key[1] = 55: parent[0x1b06d60]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1b06ee0): key[0] = 62: parent[0x1b06d60]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1b06ee0): key[1] = 69: parent[0x1b06d60]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0x1b06d60): key[0] = 60: parent[0x1b06f60]->children[0]->keys[0] = 60

Four node:  address(0x1b06d20): key[0] = 79: parent[0x1b06f20]->children[0]->keys[0] = 79 <-- is Leaf 

Four node:  address(0x1b06d20): key[1] = 80: parent[0x1b06f20]->children[0]->keys[1] = 80 <-- is Leaf 

Four node:  address(0x1b06d20): key[2] = 87: parent[0x1b06f20]->children[0]->keys[2] = 87 <-- is Leaf 

Four node:  address(0x1b06e20): key[0] = 92: parent[0x1b06f20]->children[1]->keys[0] = 92 <-- is Leaf 

Four node:  address(0x1b06e20): key[1] = 97: parent[0x1b06f20]->children[1]->keys[1] = 97 <-- is Leaf 

Four node:  address(0x1b06e20): key[2] = 100: parent[0x1b06f20]->children[1]->keys[2] = 100 <-- is Leaf 

Two node:   address(0x1b06f20): key[0] = 90: parent[0x1b06f60]->children[1]->keys[0] = 90

Two node:   address(0x1b06f60): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Two node:   address(0x1b06fa0): key[0] = 50: {Root}

============================
item 60 successfully removed 

=======Tree Debug =====================

Two node:   address(0x1b06c20): key[0] = 10: parent[0x1b06ca0]->children[0]->keys[0] = 10 <-- is Leaf 

Three node: address(0x1b06de0): key[0] = 17: parent[0x1b06ca0]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1b06de0): key[1] = 20: parent[0x1b06ca0]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1b06ca0): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Two node:   address(0x1b06e60): key[0] = 27: parent[0x1b06ea0]->children[0]->keys[0] = 27 <-- is Leaf 

Three node: address(0x1b06c60): key[0] = 37: parent[0x1b06ea0]->children[1]->keys[0] = 37 <-- is Leaf 

Three node: address(0x1b06c60): key[1] = 40: parent[0x1b06ea0]->children[1]->keys[1] = 40 <-- is Leaf 

Two node:   address(0x1b06ea0): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Three node: address(0x1b06fa0): key[0] = 23: {Root}

Three node: address(0x1b06ce0): key[0] = 51: parent[0x1b06d60]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1b06ce0): key[1] = 55: parent[0x1b06d60]->children[0]->keys[1] = 55 <-- is Leaf 

Two node:   address(0x1b06ee0): key[0] = 69: parent[0x1b06d60]->children[1]->keys[0
RUN FINISHED; exit value 0; real time: 0ms; user: 0ms; system: 0ms


