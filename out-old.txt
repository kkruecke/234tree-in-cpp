Printing tree in pre order
50 23 15 1 2 10 17 20 30 26 27 33 37 40 70 60 51 55 62 69 90 79 80 87 92 97 100 201 
======================
Printing copy of tree
1 2 10 15 17 20 23 26 27 30 33 37 40 50 51 55 60 62 69 70 79 80 87 90 92 97 100 201 
======================
Printing tree in order, using lambda
1 2 10 15 17 20 23 26 27 30 33 37 40 50 51 55 60 62 69 70 79 80 87 90 92 97 100 201 
=======Tree Debug (PostOrder) Printer =====================

Four node:  address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0xd9dca0): key[2] = 10: parent[0xd9dd20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0xd9de60): key[0] = 17: parent[0xd9dd20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0xd9de60): key[1] = 20: parent[0xd9dd20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 15: parent[0xd9de20]->children[0]->keys[0] = 15

Three node: address(0xd9dee0): key[0] = 26: parent[0xd9df20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 27: parent[0xd9df20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0xd9dce0): key[0] = 33: parent[0xd9df20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0xd9dce0): key[1] = 37: parent[0xd9df20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0xd9dce0): key[2] = 40: parent[0xd9df20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0xd9df20): key[0] = 30: parent[0xd9de20]->children[1]->keys[0] = 30

Two node:   address(0xd9de20): key[0] = 23: parent[ root ]->children[0]->keys[0] = 23

Three node: address(0xd9dd60): key[0] = 51: parent[0xd9dde0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0xd9dd60): key[1] = 55: parent[0xd9dde0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0xd9df60): key[0] = 62: parent[0xd9dde0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0xd9df60): key[1] = 69: parent[0xd9dde0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 60: parent[0xd9dfe0]->children[0]->keys[0] = 60

Four node:  address(0xd9dda0): key[0] = 79: parent[0xd9dfa0]->children[0]->keys[0] = 79 <-- is Leaf 

Four node:  address(0xd9dda0): key[1] = 80: parent[0xd9dfa0]->children[0]->keys[1] = 80 <-- is Leaf 

Four node:  address(0xd9dda0): key[2] = 87: parent[0xd9dfa0]->children[0]->keys[2] = 87 <-- is Leaf 

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[1]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9dfa0): key[0] = 90: parent[0xd9dfe0]->children[1]->keys[0] = 90

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[2]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[2]->keys[1] = 201 <-- is Leaf 

Three node: address(0xd9dfa0): key[1] = 97: parent[0xd9dfe0]->children[1]->keys[1] = 97

Two node:   address(0xd9dfe0): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Two node:   address(0xd9e020): key[0] = 50: {Root}

============================
item 60 successfully removed 

=======Tree Debug =====================

Four node:  address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0xd9dca0): key[2] = 10: parent[0xd9dd20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0xd9de60): key[0] = 17: parent[0xd9dd20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0xd9de60): key[1] = 20: parent[0xd9dd20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0xd9dee0): key[0] = 26: parent[0xd9df20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 27: parent[0xd9df20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0xd9dce0): key[0] = 33: parent[0xd9df20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0xd9dce0): key[1] = 37: parent[0xd9df20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0xd9dce0): key[2] = 40: parent[0xd9df20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0xd9df20): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Four node:  address(0xd9e020): key[0] = 23: {Root}

Three node: address(0xd9dd60): key[0] = 51: parent[0xd9dde0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0xd9dd60): key[1] = 55: parent[0xd9dde0]->children[0]->keys[1] = 55 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[1]->keys[0] = 69 <-- is Leaf 

Three node: address(0xd9dde0): key[0] = 62: parent[ root ]->children[2]->keys[0] = 62

Four node:  address(0xd9dda0): key[0] = 79: parent[0xd9dde0]->children[2]->keys[0] = 79 <-- is Leaf 

Four node:  address(0xd9dda0): key[1] = 80: parent[0xd9dde0]->children[2]->keys[1] = 80 <-- is Leaf 

Four node:  address(0xd9dda0): key[2] = 87: parent[0xd9dde0]->children[2]->keys[2] = 87 <-- is Leaf 

Three node: address(0xd9dde0): key[1] = 70: parent[ root ]->children[2]->keys[1] = 70

Four node:  address(0xd9e020): key[1] = 50: {Root}

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0xd9e020): key[2] = 90: {Root}

=================== Normal Tree Print =======================
1 2 10 15 17 20 23 26 27 30 33 37 40 50 51 55 62 69 70 79 80 87 90 92 97 100 201 
-----------------------

item 30 successfully removed 

=======Tree Debug =====================

Four node:  address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0xd9dca0): key[2] = 10: parent[0xd9dd20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0xd9de60): key[0] = 17: parent[0xd9dd20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0xd9de60): key[1] = 20: parent[0xd9dd20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0xd9dee0): key[0] = 26: parent[0xd9df20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 27: parent[0xd9df20]->children[0]->keys[1] = 27 <-- is Leaf 

Three node: address(0xd9dce0): key[0] = 37: parent[0xd9df20]->children[1]->keys[0] = 37 <-- is Leaf 

Three node: address(0xd9dce0): key[1] = 40: parent[0xd9df20]->children[1]->keys[1] = 40 <-- is Leaf 

Three node: address(0xd9df20): key[0] = 33: parent[ root ]->children[1]->keys[0] = 33

Three node: address(0xd9dd60): key[0] = 51: parent[0xd9df20]->children[2]->keys[0] = 51 <-- is Leaf 

Three node: address(0xd9dd60): key[1] = 55: parent[0xd9df20]->children[2]->keys[1] = 55 <-- is Leaf 

Three node: address(0xd9df20): key[1] = 50: parent[ root ]->children[1]->keys[1] = 50

Four node:  address(0xd9e020): key[0] = 23: {Root}

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[0]->keys[0] = 69 <-- is Leaf 

Four node:  address(0xd9dda0): key[0] = 79: parent[0xd9dde0]->children[1]->keys[0] = 79 <-- is Leaf 

Four node:  address(0xd9dda0): key[1] = 80: parent[0xd9dde0]->children[1]->keys[1] = 80 <-- is Leaf 

Four node:  address(0xd9dda0): key[2] = 87: parent[0xd9dde0]->children[1]->keys[2] = 87 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 70: parent[ root ]->children[2]->keys[0] = 70

Four node:  address(0xd9e020): key[1] = 62: {Root}

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0xd9e020): key[2] = 90: {Root}

=================== Normal Tree Print =======================
1 2 10 15 17 20 23 26 27 33 37 40 50 51 55 62 69 70 79 80 87 90 92 97 100 201 
-----------------------

item 10 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Three node: address(0xd9de60): key[0] = 17: parent[0xd9dd20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0xd9de60): key[1] = 20: parent[0xd9dd20]->children[1]->keys[1] = 20 <-- is Leaf 

Three node: address(0xd9dd20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0xd9dee0): key[0] = 26: parent[0xd9dd20]->children[2]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 27: parent[0xd9dd20]->children[2]->keys[1] = 27 <-- is Leaf 

Three node: address(0xd9dd20): key[1] = 23: parent[ root ]->children[0]->keys[1] = 23

Three node: address(0xd9dce0): key[0] = 37: parent[0xd9df20]->children[0]->keys[0] = 37 <-- is Leaf 

Three node: address(0xd9dce0): key[1] = 40: parent[0xd9df20]->children[0]->keys[1] = 40 <-- is Leaf 

Three node: address(0xd9dd60): key[0] = 51: parent[0xd9df20]->children[1]->keys[0] = 51 <-- is Leaf 

Three node: address(0xd9dd60): key[1] = 55: parent[0xd9df20]->children[1]->keys[1] = 55 <-- is Leaf 

Two node:   address(0xd9df20): key[0] = 50: parent[ root ]->children[1]->keys[0] = 50

Four node:  address(0xd9e020): key[0] = 33: {Root}

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[0]->keys[0] = 69 <-- is Leaf 

Four node:  address(0xd9dda0): key[0] = 79: parent[0xd9dde0]->children[1]->keys[0] = 79 <-- is Leaf 

Four node:  address(0xd9dda0): key[1] = 80: parent[0xd9dde0]->children[1]->keys[1] = 80 <-- is Leaf 

Four node:  address(0xd9dda0): key[2] = 87: parent[0xd9dde0]->children[1]->keys[2] = 87 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 70: parent[ root ]->children[2]->keys[0] = 70

Four node:  address(0xd9e020): key[1] = 62: {Root}

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0xd9e020): key[2] = 90: {Root}

=================== Normal Tree Print =======================
1 2 15 17 20 23 26 27 33 37 40 50 51 55 62 69 70 79 80 87 90 92 97 100 201 
-----------------------

item 20 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 17: parent[0xd9dd20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0xd9dd20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0xd9dee0): key[0] = 26: parent[0xd9dd20]->children[2]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 27: parent[0xd9dd20]->children[2]->keys[1] = 27 <-- is Leaf 

Three node: address(0xd9dd20): key[1] = 23: parent[ root ]->children[0]->keys[1] = 23

Three node: address(0xd9dce0): key[0] = 37: parent[0xd9df20]->children[0]->keys[0] = 37 <-- is Leaf 

Three node: address(0xd9dce0): key[1] = 40: parent[0xd9df20]->children[0]->keys[1] = 40 <-- is Leaf 

Three node: address(0xd9dd60): key[0] = 51: parent[0xd9df20]->children[1]->keys[0] = 51 <-- is Leaf 

Three node: address(0xd9dd60): key[1] = 55: parent[0xd9df20]->children[1]->keys[1] = 55 <-- is Leaf 

Two node:   address(0xd9df20): key[0] = 50: parent[ root ]->children[1]->keys[0] = 50

Four node:  address(0xd9e020): key[0] = 33: {Root}

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[0]->keys[0] = 69 <-- is Leaf 

Four node:  address(0xd9dda0): key[0] = 79: parent[0xd9dde0]->children[1]->keys[0] = 79 <-- is Leaf 

Four node:  address(0xd9dda0): key[1] = 80: parent[0xd9dde0]->children[1]->keys[1] = 80 <-- is Leaf 

Four node:  address(0xd9dda0): key[2] = 87: parent[0xd9dde0]->children[1]->keys[2] = 87 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 70: parent[ root ]->children[2]->keys[0] = 70

Four node:  address(0xd9e020): key[1] = 62: {Root}

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0xd9e020): key[2] = 90: {Root}

=================== Normal Tree Print =======================
1 2 15 17 23 26 27 33 37 40 50 51 55 62 69 70 79 80 87 90 92 97 100 201 
-----------------------

item 50 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 17: parent[0xd9dd20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0xd9dee0): key[0] = 26: parent[0xd9df20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 27: parent[0xd9df20]->children[0]->keys[1] = 27 <-- is Leaf 

Three node: address(0xd9dce0): key[0] = 37: parent[0xd9df20]->children[1]->keys[0] = 37 <-- is Leaf 

Three node: address(0xd9dce0): key[1] = 40: parent[0xd9df20]->children[1]->keys[1] = 40 <-- is Leaf 

Three node: address(0xd9df20): key[0] = 33: parent[ root ]->children[1]->keys[0] = 33

Two node:   address(0xd9dd60): key[0] = 55: parent[0xd9df20]->children[2]->keys[0] = 55 <-- is Leaf 

Three node: address(0xd9df20): key[1] = 51: parent[ root ]->children[1]->keys[1] = 51

Four node:  address(0xd9e020): key[0] = 23: {Root}

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[0]->keys[0] = 69 <-- is Leaf 

Four node:  address(0xd9dda0): key[0] = 79: parent[0xd9dde0]->children[1]->keys[0] = 79 <-- is Leaf 

Four node:  address(0xd9dda0): key[1] = 80: parent[0xd9dde0]->children[1]->keys[1] = 80 <-- is Leaf 

Four node:  address(0xd9dda0): key[2] = 87: parent[0xd9dde0]->children[1]->keys[2] = 87 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 70: parent[ root ]->children[2]->keys[0] = 70

Four node:  address(0xd9e020): key[1] = 62: {Root}

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0xd9e020): key[2] = 90: {Root}

=================== Normal Tree Print =======================
1 2 15 17 23 26 27 33 37 40 51 55 62 69 70 79 80 87 90 92 97 100 201 
-----------------------

item 40 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 17: parent[0xd9dd20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0xd9dee0): key[0] = 26: parent[0xd9df20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 27: parent[0xd9df20]->children[0]->keys[1] = 27 <-- is Leaf 

Two node:   address(0xd9dce0): key[0] = 37: parent[0xd9df20]->children[1]->keys[0] = 37 <-- is Leaf 

Three node: address(0xd9df20): key[0] = 33: parent[ root ]->children[1]->keys[0] = 33

Two node:   address(0xd9dd60): key[0] = 55: parent[0xd9df20]->children[2]->keys[0] = 55 <-- is Leaf 

Three node: address(0xd9df20): key[1] = 51: parent[ root ]->children[1]->keys[1] = 51

Four node:  address(0xd9e020): key[0] = 23: {Root}

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[0]->keys[0] = 69 <-- is Leaf 

Four node:  address(0xd9dda0): key[0] = 79: parent[0xd9dde0]->children[1]->keys[0] = 79 <-- is Leaf 

Four node:  address(0xd9dda0): key[1] = 80: parent[0xd9dde0]->children[1]->keys[1] = 80 <-- is Leaf 

Four node:  address(0xd9dda0): key[2] = 87: parent[0xd9dde0]->children[1]->keys[2] = 87 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 70: parent[ root ]->children[2]->keys[0] = 70

Four node:  address(0xd9e020): key[1] = 62: {Root}

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0xd9e020): key[2] = 90: {Root}

=================== Normal Tree Print =======================
1 2 15 17 23 26 27 33 37 51 55 62 69 70 79 80 87 90 92 97 100 201 
-----------------------

item 70 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 17: parent[0xd9dd20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0xd9dee0): key[0] = 26: parent[0xd9df20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 27: parent[0xd9df20]->children[0]->keys[1] = 27 <-- is Leaf 

Two node:   address(0xd9dce0): key[0] = 37: parent[0xd9df20]->children[1]->keys[0] = 37 <-- is Leaf 

Two node:   address(0xd9df20): key[0] = 33: parent[ root ]->children[1]->keys[0] = 33

Four node:  address(0xd9e020): key[0] = 23: {Root}

Two node:   address(0xd9dd60): key[0] = 55: parent[0xd9dde0]->children[0]->keys[0] = 55 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[1]->keys[0] = 69 <-- is Leaf 

Three node: address(0xd9dde0): key[0] = 62: parent[ root ]->children[2]->keys[0] = 62

Three node: address(0xd9dda0): key[0] = 80: parent[0xd9dde0]->children[2]->keys[0] = 80 <-- is Leaf 

Three node: address(0xd9dda0): key[1] = 87: parent[0xd9dde0]->children[2]->keys[1] = 87 <-- is Leaf 

Three node: address(0xd9dde0): key[1] = 79: parent[ root ]->children[2]->keys[1] = 79

Four node:  address(0xd9e020): key[1] = 51: {Root}

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0xd9e020): key[2] = 90: {Root}

=================== Normal Tree Print =======================
1 2 15 17 23 26 27 33 37 51 55 62 69 79 80 87 90 92 97 100 201 
-----------------------

item 80 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 17: parent[0xd9dd20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0xd9dee0): key[0] = 26: parent[0xd9df20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 27: parent[0xd9df20]->children[0]->keys[1] = 27 <-- is Leaf 

Two node:   address(0xd9dce0): key[0] = 37: parent[0xd9df20]->children[1]->keys[0] = 37 <-- is Leaf 

Two node:   address(0xd9df20): key[0] = 33: parent[ root ]->children[1]->keys[0] = 33

Four node:  address(0xd9e020): key[0] = 23: {Root}

Two node:   address(0xd9dd60): key[0] = 55: parent[0xd9dde0]->children[0]->keys[0] = 55 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[1]->keys[0] = 69 <-- is Leaf 

Three node: address(0xd9dde0): key[0] = 62: parent[ root ]->children[2]->keys[0] = 62

Two node:   address(0xd9dda0): key[0] = 87: parent[0xd9dde0]->children[2]->keys[0] = 87 <-- is Leaf 

Three node: address(0xd9dde0): key[1] = 79: parent[ root ]->children[2]->keys[1] = 79

Four node:  address(0xd9e020): key[1] = 51: {Root}

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0xd9e020): key[2] = 90: {Root}

=================== Normal Tree Print =======================
1 2 15 17 23 26 27 33 37 51 55 62 69 79 87 90 92 97 100 201 
-----------------------

item 15 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Four node:  address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Two node:   address(0xd9dee0): key[0] = 27: parent[0xd9dd20]->children[2]->keys[0] = 27 <-- is Leaf 

Four node:  address(0xd9dd20): key[1] = 26: parent[ root ]->children[0]->keys[1] = 26

Two node:   address(0xd9dce0): key[0] = 37: parent[0xd9dd20]->children[3]->keys[0] = 37 <-- is Leaf 

Four node:  address(0xd9dd20): key[2] = 33: parent[ root ]->children[0]->keys[2] = 33

Two node:   address(0xd9dd60): key[0] = 55: parent[0xd9dde0]->children[0]->keys[0] = 55 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[1]->keys[0] = 69 <-- is Leaf 

Three node: address(0xd9dde0): key[0] = 62: parent[ root ]->children[1]->keys[0] = 62

Two node:   address(0xd9dda0): key[0] = 87: parent[0xd9dde0]->children[2]->keys[0] = 87 <-- is Leaf 

Three node: address(0xd9dde0): key[1] = 79: parent[ root ]->children[1]->keys[1] = 79

Three node: address(0xd9e020): key[0] = 51: {Root}

Two node:   address(0xd9dea0): key[0] = 92: parent[0xd9dfa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 100: parent[0xd9dfa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0xd9e020): key[1] = 90: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 27 33 37 51 55 62 69 79 87 90 92 97 100 201 
-----------------------

item 90 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Four node:  address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Two node:   address(0xd9dee0): key[0] = 27: parent[0xd9dd20]->children[2]->keys[0] = 27 <-- is Leaf 

Four node:  address(0xd9dd20): key[1] = 26: parent[ root ]->children[0]->keys[1] = 26

Two node:   address(0xd9dce0): key[0] = 37: parent[0xd9dd20]->children[3]->keys[0] = 37 <-- is Leaf 

Four node:  address(0xd9dd20): key[2] = 33: parent[ root ]->children[0]->keys[2] = 33

Two node:   address(0xd9dd60): key[0] = 55: parent[0xd9dde0]->children[0]->keys[0] = 55 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[1]->keys[0] = 69 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 62: parent[ root ]->children[1]->keys[0] = 62

Three node: address(0xd9e020): key[0] = 51: {Root}

Two node:   address(0xd9dda0): key[0] = 87: parent[0xd9dfa0]->children[0]->keys[0] = 87 <-- is Leaf 

Two node:   address(0xd9dea0): key[0] = 97: parent[0xd9dfa0]->children[1]->keys[0] = 97 <-- is Leaf 

Three node: address(0xd9dfa0): key[0] = 92: parent[ root ]->children[2]->keys[0] = 92

Two node:   address(0xd9e060): key[0] = 201: parent[0xd9dfa0]->children[2]->keys[0] = 201 <-- is Leaf 

Three node: address(0xd9dfa0): key[1] = 100: parent[ root ]->children[2]->keys[1] = 100

Three node: address(0xd9e020): key[1] = 79: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 27 33 37 51 55 62 69 79 87 92 97 100 201 
-----------------------

item 100 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Four node:  address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Two node:   address(0xd9dee0): key[0] = 27: parent[0xd9dd20]->children[2]->keys[0] = 27 <-- is Leaf 

Four node:  address(0xd9dd20): key[1] = 26: parent[ root ]->children[0]->keys[1] = 26

Two node:   address(0xd9dce0): key[0] = 37: parent[0xd9dd20]->children[3]->keys[0] = 37 <-- is Leaf 

Four node:  address(0xd9dd20): key[2] = 33: parent[ root ]->children[0]->keys[2] = 33

Two node:   address(0xd9dd60): key[0] = 55: parent[0xd9dde0]->children[0]->keys[0] = 55 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[1]->keys[0] = 69 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 62: parent[ root ]->children[1]->keys[0] = 62

Three node: address(0xd9e020): key[0] = 51: {Root}

Two node:   address(0xd9dda0): key[0] = 87: parent[0xd9dfa0]->children[0]->keys[0] = 87 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 97: parent[0xd9dfa0]->children[1]->keys[0] = 97 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 92: parent[ root ]->children[2]->keys[0] = 92

Three node: address(0xd9e020): key[1] = 79: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 27 33 37 51 55 62 69 79 87 92 97 201 
-----------------------

item 27 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Three node: address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Three node: address(0xd9dee0): key[0] = 33: parent[0xd9dd20]->children[2]->keys[0] = 33 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 37: parent[0xd9dd20]->children[2]->keys[1] = 37 <-- is Leaf 

Three node: address(0xd9dd20): key[1] = 26: parent[ root ]->children[0]->keys[1] = 26

Two node:   address(0xd9dd60): key[0] = 55: parent[0xd9dde0]->children[0]->keys[0] = 55 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dde0]->children[1]->keys[0] = 69 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 62: parent[ root ]->children[1]->keys[0] = 62

Three node: address(0xd9e020): key[0] = 51: {Root}

Two node:   address(0xd9dda0): key[0] = 87: parent[0xd9dfa0]->children[0]->keys[0] = 87 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 97: parent[0xd9dfa0]->children[1]->keys[0] = 97 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 92: parent[ root ]->children[2]->keys[0] = 92

Three node: address(0xd9e020): key[1] = 79: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 33 37 51 55 62 69 79 87 92 97 201 
-----------------------

item 62 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Three node: address(0xd9dee0): key[0] = 33: parent[0xd9dde0]->children[0]->keys[0] = 33 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 37: parent[0xd9dde0]->children[0]->keys[1] = 37 <-- is Leaf 

Three node: address(0xd9df60): key[0] = 55: parent[0xd9dde0]->children[1]->keys[0] = 55 <-- is Leaf 

Three node: address(0xd9df60): key[1] = 69: parent[0xd9dde0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0xd9dde0): key[0] = 51: parent[ root ]->children[1]->keys[0] = 51

Three node: address(0xd9e020): key[0] = 26: {Root}

Two node:   address(0xd9dda0): key[0] = 87: parent[0xd9dfa0]->children[0]->keys[0] = 87 <-- is Leaf 

Three node: address(0xd9e060): key[0] = 97: parent[0xd9dfa0]->children[1]->keys[0] = 97 <-- is Leaf 

Three node: address(0xd9e060): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 92: parent[ root ]->children[2]->keys[0] = 92

Three node: address(0xd9e020): key[1] = 79: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 33 37 51 55 69 79 87 92 97 201 
-----------------------

item 87 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Three node: address(0xd9dee0): key[0] = 33: parent[0xd9dfa0]->children[0]->keys[0] = 33 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 37: parent[0xd9dfa0]->children[0]->keys[1] = 37 <-- is Leaf 

Three node: address(0xd9df60): key[0] = 55: parent[0xd9dfa0]->children[1]->keys[0] = 55 <-- is Leaf 

Three node: address(0xd9df60): key[1] = 69: parent[0xd9dfa0]->children[1]->keys[1] = 69 <-- is Leaf 

Four node:  address(0xd9dfa0): key[0] = 51: parent[ root ]->children[1]->keys[0] = 51

Two node:   address(0xd9dda0): key[0] = 92: parent[0xd9dfa0]->children[2]->keys[0] = 92 <-- is Leaf 

Four node:  address(0xd9dfa0): key[1] = 79: parent[ root ]->children[1]->keys[1] = 79

Two node:   address(0xd9e060): key[0] = 201: parent[0xd9dfa0]->children[3]->keys[0] = 201 <-- is Leaf 

Four node:  address(0xd9dfa0): key[2] = 97: parent[ root ]->children[1]->keys[2] = 97

Two node:   address(0xd9e020): key[0] = 26: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 33 37 51 55 69 79 92 97 201 
-----------------------

item 37 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Two node:   address(0xd9dee0): key[0] = 33: parent[0xd9dfa0]->children[0]->keys[0] = 33 <-- is Leaf 

Three node: address(0xd9df60): key[0] = 55: parent[0xd9dfa0]->children[1]->keys[0] = 55 <-- is Leaf 

Three node: address(0xd9df60): key[1] = 69: parent[0xd9dfa0]->children[1]->keys[1] = 69 <-- is Leaf 

Four node:  address(0xd9dfa0): key[0] = 51: parent[ root ]->children[1]->keys[0] = 51

Two node:   address(0xd9dda0): key[0] = 92: parent[0xd9dfa0]->children[2]->keys[0] = 92 <-- is Leaf 

Four node:  address(0xd9dfa0): key[1] = 79: parent[ root ]->children[1]->keys[1] = 79

Two node:   address(0xd9e060): key[0] = 201: parent[0xd9dfa0]->children[3]->keys[0] = 201 <-- is Leaf 

Four node:  address(0xd9dfa0): key[2] = 97: parent[ root ]->children[1]->keys[2] = 97

Two node:   address(0xd9e020): key[0] = 26: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 33 51 55 69 79 92 97 201 
-----------------------

item 27 not successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Three node: address(0xd9dee0): key[0] = 33: parent[0xd9dfa0]->children[0]->keys[0] = 33 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 51: parent[0xd9dfa0]->children[0]->keys[1] = 51 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dfa0]->children[1]->keys[0] = 69 <-- is Leaf 

Four node:  address(0xd9dfa0): key[0] = 55: parent[ root ]->children[1]->keys[0] = 55

Two node:   address(0xd9dda0): key[0] = 92: parent[0xd9dfa0]->children[2]->keys[0] = 92 <-- is Leaf 

Four node:  address(0xd9dfa0): key[1] = 79: parent[ root ]->children[1]->keys[1] = 79

Two node:   address(0xd9e060): key[0] = 201: parent[0xd9dfa0]->children[3]->keys[0] = 201 <-- is Leaf 

Four node:  address(0xd9dfa0): key[2] = 97: parent[ root ]->children[1]->keys[2] = 97

Two node:   address(0xd9e020): key[0] = 26: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 33 51 55 69 79 92 97 201 
-----------------------

item 92 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Three node: address(0xd9dee0): key[0] = 33: parent[0xd9dfa0]->children[0]->keys[0] = 33 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 51: parent[0xd9dfa0]->children[0]->keys[1] = 51 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dfa0]->children[1]->keys[0] = 69 <-- is Leaf 

Three node: address(0xd9dfa0): key[0] = 55: parent[ root ]->children[1]->keys[0] = 55

Three node: address(0xd9dda0): key[0] = 97: parent[0xd9dfa0]->children[2]->keys[0] = 97 <-- is Leaf 

Three node: address(0xd9dda0): key[1] = 201: parent[0xd9dfa0]->children[2]->keys[1] = 201 <-- is Leaf 

Three node: address(0xd9dfa0): key[1] = 79: parent[ root ]->children[1]->keys[1] = 79

Two node:   address(0xd9e020): key[0] = 26: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 33 51 55 69 79 97 201 
-----------------------

item 79 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 23: parent[0xd9dd20]->children[1]->keys[0] = 23 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Three node: address(0xd9dee0): key[0] = 33: parent[0xd9dfa0]->children[0]->keys[0] = 33 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 51: parent[0xd9dfa0]->children[0]->keys[1] = 51 <-- is Leaf 

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dfa0]->children[1]->keys[0] = 69 <-- is Leaf 

Three node: address(0xd9dfa0): key[0] = 55: parent[ root ]->children[1]->keys[0] = 55

Two node:   address(0xd9dda0): key[0] = 201: parent[0xd9dfa0]->children[2]->keys[0] = 201 <-- is Leaf 

Three node: address(0xd9dfa0): key[1] = 97: parent[ root ]->children[1]->keys[1] = 97

Two node:   address(0xd9e020): key[0] = 26: {Root}

=================== Normal Tree Print =======================
1 2 17 23 26 33 51 55 69 97 201 
-----------------------

item 23 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 2: parent[0xd9dd20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 26: parent[0xd9dd20]->children[1]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dd20): key[0] = 17: parent[ root ]->children[0]->keys[0] = 17

Two node:   address(0xd9dee0): key[0] = 51: parent[0xd9dd20]->children[2]->keys[0] = 51 <-- is Leaf 

Three node: address(0xd9dd20): key[1] = 33: parent[ root ]->children[0]->keys[1] = 33

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dfa0]->children[0]->keys[0] = 69 <-- is Leaf 

Two node:   address(0xd9dda0): key[0] = 201: parent[0xd9dfa0]->children[1]->keys[0] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[1]->keys[0] = 97

Two node:   address(0xd9e020): key[0] = 55: {Root}

=================== Normal Tree Print =======================
1 2 17 26 33 51 55 69 97 201 
-----------------------

item 17 successfully removed 

=======Tree Debug =====================

Two node:   address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 26: parent[0xd9dd20]->children[1]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9dd20): key[0] = 2: parent[ root ]->children[0]->keys[0] = 2

Two node:   address(0xd9dee0): key[0] = 51: parent[0xd9dd20]->children[2]->keys[0] = 51 <-- is Leaf 

Three node: address(0xd9dd20): key[1] = 33: parent[ root ]->children[0]->keys[1] = 33

Two node:   address(0xd9df60): key[0] = 69: parent[0xd9dfa0]->children[0]->keys[0] = 69 <-- is Leaf 

Two node:   address(0xd9dda0): key[0] = 201: parent[0xd9dfa0]->children[1]->keys[0] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 97: parent[ root ]->children[1]->keys[0] = 97

Two node:   address(0xd9e020): key[0] = 55: {Root}

=================== Normal Tree Print =======================
1 2 26 33 51 55 69 97 201 
-----------------------

item 97 successfully removed 

=======Tree Debug =====================

Two node:   address(0xd9dca0): key[0] = 1: parent[0xd9dd20]->children[0]->keys[0] = 1 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 26: parent[0xd9dd20]->children[1]->keys[0] = 26 <-- is Leaf 

Two node:   address(0xd9dd20): key[0] = 2: parent[ root ]->children[0]->keys[0] = 2

Two node:   address(0xd9dee0): key[0] = 51: parent[0xd9dfa0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0xd9dda0): key[0] = 69: parent[0xd9dfa0]->children[1]->keys[0] = 69 <-- is Leaf 

Three node: address(0xd9dda0): key[1] = 201: parent[0xd9dfa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0xd9dfa0): key[0] = 55: parent[ root ]->children[1]->keys[0] = 55

Two node:   address(0xd9e020): key[0] = 33: {Root}

=================== Normal Tree Print =======================
1 2 26 33 51 55 69 201 
-----------------------

item 55 successfully removed 

=======Tree Debug =====================

Two node:   address(0xd9dca0): key[0] = 1: parent[ root ]->children[0]->keys[0] = 1 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 26: parent[ root ]->children[1]->keys[0] = 26 <-- is Leaf 

Four node:  address(0xd9e020): key[0] = 2: {Root}

Two node:   address(0xd9dee0): key[0] = 51: parent[ root ]->children[2]->keys[0] = 51 <-- is Leaf 

Four node:  address(0xd9e020): key[1] = 33: {Root}

Two node:   address(0xd9dda0): key[0] = 201: parent[ root ]->children[3]->keys[0] = 201 <-- is Leaf 

Four node:  address(0xd9e020): key[2] = 69: {Root}

=================== Normal Tree Print =======================
1 2 26 33 51 69 201 
-----------------------

item 51 successfully removed 

=======Tree Debug =====================

Two node:   address(0xd9dca0): key[0] = 1: parent[ root ]->children[0]->keys[0] = 1 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 26: parent[ root ]->children[1]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9e020): key[0] = 2: {Root}

Three node: address(0xd9dee0): key[0] = 69: parent[ root ]->children[2]->keys[0] = 69 <-- is Leaf 

Three node: address(0xd9dee0): key[1] = 201: parent[ root ]->children[2]->keys[1] = 201 <-- is Leaf 

Three node: address(0xd9e020): key[1] = 33: {Root}

=================== Normal Tree Print =======================
1 2 26 33 69 201 
-----------------------

item 69 successfully removed 

=======Tree Debug =====================

Two node:   address(0xd9dca0): key[0] = 1: parent[ root ]->children[0]->keys[0] = 1 <-- is Leaf 

Two node:   address(0xd9de60): key[0] = 26: parent[ root ]->children[1]->keys[0] = 26 <-- is Leaf 

Three node: address(0xd9e020): key[0] = 2: {Root}

Two node:   address(0xd9dee0): key[0] = 201: parent[ root ]->children[2]->keys[0] = 201 <-- is Leaf 

Three node: address(0xd9e020): key[1] = 33: {Root}

=================== Normal Tree Print =======================
1 2 26 33 201 
-----------------------

item 1 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9dca0): key[0] = 2: parent[ root ]->children[0]->keys[0] = 2 <-- is Leaf 

Three node: address(0xd9dca0): key[1] = 26: parent[ root ]->children[0]->keys[1] = 26 <-- is Leaf 

Two node:   address(0xd9dee0): key[0] = 201: parent[ root ]->children[1]->keys[0] = 201 <-- is Leaf 

Two node:   address(0xd9e020): key[0] = 33: {Root}

=================== Normal Tree Print =======================
2 26 33 201 
-----------------------

item 201 successfully removed 

=======Tree Debug =====================

Two node:   address(0xd9dca0): key[0] = 2: parent[ root ]->children[0]->keys[0] = 2 <-- is Leaf 

Two node:   address(0xd9dee0): key[0] = 33: parent[ root ]->children[1]->keys[0] = 33 <-- is Leaf 

Two node:   address(0xd9e020): key[0] = 26: {Root}

=================== Normal Tree Print =======================
2 26 33 
-----------------------

item 2 successfully removed 

=======Tree Debug =====================

Three node: address(0xd9e020): key[0] = 26: {Root} <-- is Leaf 

Three node: address(0xd9e020): key[1] = 33: {Root} <-- is Leaf 

=================== Normal Tree Print =======================
26 33 
-----------------------

item 33 successfully removed 

=======Tree Debug =====================

Two node:   address(0xd9e020): key[0] = 26: {Root} <-- is Leaf 

=================== Normal Tree Print =======================
26 
-----------------------

item 26 successfully removed 

=======Tree Debug =====================

=================== Normal Tree Print =======================

-----------------------


==== Final Tree ========


