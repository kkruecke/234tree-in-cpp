Printing tree in pre order
50 23 15 1 2 10 17 20 30 26 27 33 37 40 70 60 51 55 62 69 90 79 80 87 92 97 100 201 
======================
Printing copy of tree
1 2 10 15 17 20 23 26 27 30 33 37 40 50 51 55 60 62 69 70 79 80 87 90 92 97 100 201 
======================
Printing tree in order, using lambda
1 2 10 15 17 20 23 26 27 30 33 37 40 50 51 55 60 62 69 70 79 80 87 90 92 97 100 201 
=======Tree Debug (PostOrder) Printer =====================

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[0x1458e20]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 30: parent[0x1458e20]->children[1]->keys[0] = 30

Two node:   address(0x1458e20): key[0] = 23: parent[ root ]->children[0]->keys[0] = 23

Three node: address(0x1458d60): key[0] = 51: parent[0x1458de0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458de0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f60): key[0] = 62: parent[0x1458de0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458de0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0x1458de0): key[0] = 60: parent[0x1458fe0]->children[0]->keys[0] = 60

Four node:  address(0x1458da0): key[0] = 79: parent[0x1458fa0]->children[0]->keys[0] = 79 <-- is Leaf 

Four node:  address(0x1458da0): key[1] = 80: parent[0x1458fa0]->children[0]->keys[1] = 80 <-- is Leaf 

Four node:  address(0x1458da0): key[2] = 87: parent[0x1458fa0]->children[0]->keys[2] = 87 <-- is Leaf 

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[1]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1458fa0): key[0] = 90: parent[0x1458fe0]->children[1]->keys[0] = 90

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[2]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[2]->keys[1] = 201 <-- is Leaf 

Three node: address(0x1458fa0): key[1] = 97: parent[0x1458fe0]->children[1]->keys[1] = 97

Two node:   address(0x1458fe0): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Two node:   address(0x1459020): key[0] = 50: {Root}

============================
Attempting to remove 60
In convertTwoNode. Debug print before converting 2-node
total items in tree = 28

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[0x1458e20]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 30: parent[0x1458e20]->children[1]->keys[0] = 30

Two node:   address(0x1458e20): key[0] = 23: parent[ root ]->children[0]->keys[0] = 23

Three node: address(0x1458d60): key[0] = 51: parent[0x1458de0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458de0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f60): key[0] = 62: parent[0x1458de0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458de0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0x1458de0): key[0] = 60: parent[0x1458fe0]->children[0]->keys[0] = 60

Four node:  address(0x1458da0): key[0] = 79: parent[0x1458fa0]->children[0]->keys[0] = 79 <-- is Leaf 

Four node:  address(0x1458da0): key[1] = 80: parent[0x1458fa0]->children[0]->keys[1] = 80 <-- is Leaf 

Four node:  address(0x1458da0): key[2] = 87: parent[0x1458fa0]->children[0]->keys[2] = 87 <-- is Leaf 

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[1]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1458fa0): key[0] = 90: parent[0x1458fe0]->children[1]->keys[0] = 90

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[2]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[2]->keys[1] = 201 <-- is Leaf 

Three node: address(0x1458fa0): key[1] = 97: parent[0x1458fe0]->children[1]->keys[1] = 97

Two node:   address(0x1458fe0): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Two node:   address(0x1459020): key[0] = 50: {Root}

Debug print after converting 2-mode root
total items in tree = 56

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Four node:  address(0x1459020): key[0] = 23: {Root}

Three node: address(0x1458d60): key[0] = 51: parent[0x1458de0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458de0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f60): key[0] = 62: parent[0x1458de0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458de0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0x1458de0): key[0] = 60: parent[ root ]->children[2]->keys[0] = 60

Four node:  address(0x1459020): key[1] = 50: {Root}

Four node:  address(0x1458da0): key[0] = 79: parent[0x1458fa0]->children[0]->keys[0] = 79 <-- is Leaf 

Four node:  address(0x1458da0): key[1] = 80: parent[0x1458fa0]->children[0]->keys[1] = 80 <-- is Leaf 

Four node:  address(0x1458da0): key[2] = 87: parent[0x1458fa0]->children[0]->keys[2] = 87 <-- is Leaf 

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[1]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1458fa0): key[0] = 90: parent[ root ]->children[3]->keys[0] = 90

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[2]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[2]->keys[1] = 201 <-- is Leaf 

Three node: address(0x1458fa0): key[1] = 97: parent[ root ]->children[3]->keys[1] = 97

Four node:  address(0x1459020): key[2] = 70: {Root}

In convertTwoNode. Debug print before converting 2-node
total items in tree = 28

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Four node:  address(0x1459020): key[0] = 23: {Root}

Three node: address(0x1458d60): key[0] = 51: parent[0x1458de0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458de0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f60): key[0] = 62: parent[0x1458de0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458de0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0x1458de0): key[0] = 60: parent[ root ]->children[2]->keys[0] = 60

Four node:  address(0x1459020): key[1] = 50: {Root}

Four node:  address(0x1458da0): key[0] = 79: parent[0x1458fa0]->children[0]->keys[0] = 79 <-- is Leaf 

Four node:  address(0x1458da0): key[1] = 80: parent[0x1458fa0]->children[0]->keys[1] = 80 <-- is Leaf 

Four node:  address(0x1458da0): key[2] = 87: parent[0x1458fa0]->children[0]->keys[2] = 87 <-- is Leaf 

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[1]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1458fa0): key[0] = 90: parent[ root ]->children[3]->keys[0] = 90

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[2]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[2]->keys[1] = 201 <-- is Leaf 

Three node: address(0x1458fa0): key[1] = 97: parent[ root ]->children[3]->keys[1] = 97

Four node:  address(0x1459020): key[2] = 70: {Root}

In convertTwoNode(). Tree size before converting 2-node root = 28
Debug print before converting 2-node root

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Four node:  address(0x1459020): key[0] = 23: {Root}

Three node: address(0x1458d60): key[0] = 51: parent[0x1458de0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458de0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f60): key[0] = 62: parent[0x1458de0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458de0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0x1458de0): key[0] = 60: parent[ root ]->children[2]->keys[0] = 60

Four node:  address(0x1459020): key[1] = 50: {Root}

Four node:  address(0x1458da0): key[0] = 79: parent[0x1458fa0]->children[0]->keys[0] = 79 <-- is Leaf 

Four node:  address(0x1458da0): key[1] = 80: parent[0x1458fa0]->children[0]->keys[1] = 80 <-- is Leaf 

Four node:  address(0x1458da0): key[2] = 87: parent[0x1458fa0]->children[0]->keys[2] = 87 <-- is Leaf 

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[1]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1458fa0): key[0] = 90: parent[ root ]->children[3]->keys[0] = 90

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[2]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[2]->keys[1] = 201 <-- is Leaf 

Three node: address(0x1458fa0): key[1] = 97: parent[ root ]->children[3]->keys[1] = 97

Four node:  address(0x1459020): key[2] = 70: {Root}

Debug print after converting 2-node non-root node
total items in tree = 28

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Four node:  address(0x1459020): key[0] = 23: {Root}

Three node: address(0x1458d60): key[0] = 51: parent[0x1458de0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458de0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f60): key[0] = 62: parent[0x1458de0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458de0]->children[1]->keys[1] = 69 <-- is Leaf 

Three node: address(0x1458de0): key[0] = 60: parent[ root ]->children[2]->keys[0] = 60

Four node:  address(0x1458da0): key[0] = 79: parent[0x1458de0]->children[2]->keys[0] = 79 <-- is Leaf 

Four node:  address(0x1458da0): key[1] = 80: parent[0x1458de0]->children[2]->keys[1] = 80 <-- is Leaf 

Four node:  address(0x1458da0): key[2] = 87: parent[0x1458de0]->children[2]->keys[2] = 87 <-- is Leaf 

Three node: address(0x1458de0): key[1] = 70: parent[ root ]->children[2]->keys[1] = 70

Four node:  address(0x1459020): key[1] = 50: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0x1459020): key[2] = 90: {Root}

item 60 successfully removed 

=======Tree Debug =====================

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Four node:  address(0x1459020): key[0] = 23: {Root}

Three node: address(0x1458d60): key[0] = 51: parent[0x1458de0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458de0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f60): key[0] = 62: parent[0x1458de0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458de0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0x1458de0): key[0] = 70: parent[ root ]->children[2]->keys[0] = 70

Four node:  address(0x1459020): key[1] = 50: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0x1459020): key[2] = 90: {Root}

=================== Normal Tree Print =======================
1 2 10 15 17 20 23 26 27 30 33 37 40 50 51 55 70 62 69 90 92 97 100 201 
-----------------------

Attempting to remove 30
In convertTwoNode. Debug print before converting 2-node
total items in tree = 24

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Four node:  address(0x1459020): key[0] = 23: {Root}

Three node: address(0x1458d60): key[0] = 51: parent[0x1458de0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458de0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f60): key[0] = 62: parent[0x1458de0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458de0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0x1458de0): key[0] = 70: parent[ root ]->children[2]->keys[0] = 70

Four node:  address(0x1459020): key[1] = 50: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0x1459020): key[2] = 90: {Root}

In convertTwoNode(). Tree size before converting 2-node root = 28
Debug print before converting 2-node root

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Four node:  address(0x1459020): key[0] = 23: {Root}

Three node: address(0x1458d60): key[0] = 51: parent[0x1458de0]->children[0]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458de0]->children[0]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f60): key[0] = 62: parent[0x1458de0]->children[1]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458de0]->children[1]->keys[1] = 69 <-- is Leaf 

Two node:   address(0x1458de0): key[0] = 70: parent[ root ]->children[2]->keys[0] = 70

Four node:  address(0x1459020): key[1] = 50: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[3]->keys[0] = 97

Four node:  address(0x1459020): key[2] = 90: {Root}

Debug print after converting 2-node non-root node
total items in tree = 24

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Four node:  address(0x1458f20): key[0] = 30: parent[ root ]->children[1]->keys[0] = 30

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[2]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[2]->keys[1] = 55 <-- is Leaf 

Four node:  address(0x1458f20): key[1] = 50: parent[ root ]->children[1]->keys[1] = 50

Three node: address(0x1458f60): key[0] = 62: parent[0x1458f20]->children[3]->keys[0] = 62 <-- is Leaf 

Three node: address(0x1458f60): key[1] = 69: parent[0x1458f20]->children[3]->keys[1] = 69 <-- is Leaf 

Four node:  address(0x1458f20): key[2] = 70: parent[ root ]->children[1]->keys[2] = 70

Three node: address(0x1459020): key[0] = 23: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

item 30 successfully removed 

=======Tree Debug =====================

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Three node: address(0x1458f20): key[0] = 50: parent[ root ]->children[1]->keys[0] = 50

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[2]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[2]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f20): key[1] = 70: parent[ root ]->children[1]->keys[1] = 70

Three node: address(0x1459020): key[0] = 23: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

=================== Normal Tree Print =======================
1 2 10 15 17 20 23 26 27 50 33 37 40 70 51 55 90 92 97 100 201 
-----------------------

Attempting to remove 10
In convertTwoNode. Debug print before converting 2-node
total items in tree = 21

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Three node: address(0x1458f20): key[0] = 50: parent[ root ]->children[1]->keys[0] = 50

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[2]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[2]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f20): key[1] = 70: parent[ root ]->children[1]->keys[1] = 70

Three node: address(0x1459020): key[0] = 23: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

In convertTwoNode(). Tree size before converting 2-node root = 28
Debug print before converting 2-node root

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Three node: address(0x1458f20): key[0] = 50: parent[ root ]->children[1]->keys[0] = 50

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[2]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[2]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f20): key[1] = 70: parent[ root ]->children[1]->keys[1] = 70

Three node: address(0x1459020): key[0] = 23: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

Debug print after converting 2-node non-root node
total items in tree = 21

Four node:  address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Four node:  address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Four node:  address(0x1458ca0): key[2] = 10: parent[0x1458d20]->children[0]->keys[2] = 10 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Three node: address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458d20]->children[2]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458d20]->children[2]->keys[1] = 27 <-- is Leaf 

Three node: address(0x1458d20): key[1] = 23: parent[ root ]->children[0]->keys[1] = 23

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[0]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[0]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[0]->keys[2] = 40 <-- is Leaf 

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[1]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[1]->keys[1] = 55 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Three node: address(0x1459020): key[0] = 50: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

item 10 successfully removed 

=======Tree Debug =====================

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Three node: address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458e60): key[1] = 20: parent[0x1458d20]->children[1]->keys[1] = 20 <-- is Leaf 

Three node: address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458d20]->children[2]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458d20]->children[2]->keys[1] = 27 <-- is Leaf 

Three node: address(0x1458d20): key[1] = 23: parent[ root ]->children[0]->keys[1] = 23

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[0]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[0]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[0]->keys[2] = 40 <-- is Leaf 

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[1]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[1]->keys[1] = 55 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Three node: address(0x1459020): key[0] = 50: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

=================== Normal Tree Print =======================
1 2 15 17 20 23 26 27 50 33 37 40 70 51 55 90 92 97 100 201 
-----------------------

Attempting to remove 20
item 20 successfully removed 

=======Tree Debug =====================

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458d20]->children[2]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458d20]->children[2]->keys[1] = 27 <-- is Leaf 

Three node: address(0x1458d20): key[1] = 23: parent[ root ]->children[0]->keys[1] = 23

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[0]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[0]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[0]->keys[2] = 40 <-- is Leaf 

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[1]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[1]->keys[1] = 55 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Three node: address(0x1459020): key[0] = 50: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

=================== Normal Tree Print =======================
1 2 15 17 23 26 27 50 33 37 40 70 51 55 90 92 97 100 201 
-----------------------

Attempting to remove 50
In convertTwoNode. Debug print before converting 2-node
total items in tree = 19

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458d20]->children[2]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458d20]->children[2]->keys[1] = 27 <-- is Leaf 

Three node: address(0x1458d20): key[1] = 23: parent[ root ]->children[0]->keys[1] = 23

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[0]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[0]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[0]->keys[2] = 40 <-- is Leaf 

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[1]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[1]->keys[1] = 55 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Three node: address(0x1459020): key[0] = 50: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

In convertTwoNode(). Tree size before converting 2-node root = 26
Debug print before converting 2-node root

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Three node: address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458d20]->children[2]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458d20]->children[2]->keys[1] = 27 <-- is Leaf 

Three node: address(0x1458d20): key[1] = 23: parent[ root ]->children[0]->keys[1] = 23

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[0]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[0]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[0]->keys[2] = 40 <-- is Leaf 

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[1]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[1]->keys[1] = 55 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Three node: address(0x1459020): key[0] = 50: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

Debug print after converting 2-node non-root node
total items in tree = 19

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Three node: address(0x1458f20): key[0] = 50: parent[ root ]->children[1]->keys[0] = 50

Three node: address(0x1458d60): key[0] = 51: parent[0x1458f20]->children[2]->keys[0] = 51 <-- is Leaf 

Three node: address(0x1458d60): key[1] = 55: parent[0x1458f20]->children[2]->keys[1] = 55 <-- is Leaf 

Three node: address(0x1458f20): key[1] = 70: parent[ root ]->children[1]->keys[1] = 70

Three node: address(0x1459020): key[0] = 23: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

item 50 successfully removed 

=======Tree Debug =====================

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Three node: address(0x1459020): key[0] = 23: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

=================== Normal Tree Print =======================
1 2 15 17 23 26 27 70 33 37 40 90 92 97 100 201 
-----------------------

Attempting to remove 40
In convertTwoNode. Debug print before converting 2-node
total items in tree = 16

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Three node: address(0x1459020): key[0] = 23: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

In convertTwoNode(). Tree size before converting 2-node root = 26
Debug print before converting 2-node root

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Two node:   address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Three node: address(0x1459020): key[0] = 23: {Root}

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458fa0]->children[0]->keys[0] = 92 <-- is Leaf 

Three node: address(0x1459060): key[0] = 100: parent[0x1458fa0]->children[1]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458fa0]->children[1]->keys[1] = 201 <-- is Leaf 

Two node:   address(0x1458fa0): key[0] = 97: parent[ root ]->children[2]->keys[0] = 97

Three node: address(0x1459020): key[1] = 90: {Root}

Debug print after converting 2-node non-root node
total items in tree = 16

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Four node:  address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458f20]->children[2]->keys[0] = 92 <-- is Leaf 

Four node:  address(0x1458f20): key[1] = 90: parent[ root ]->children[1]->keys[1] = 90

Three node: address(0x1459060): key[0] = 100: parent[0x1458f20]->children[3]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458f20]->children[3]->keys[1] = 201 <-- is Leaf 

Four node:  address(0x1458f20): key[2] = 97: parent[ root ]->children[1]->keys[2] = 97

Two node:   address(0x1459020): key[0] = 23: {Root}

item 40 not successfully removed 

=======Tree Debug =====================

Three node: address(0x1458ca0): key[0] = 1: parent[0x1458d20]->children[0]->keys[0] = 1 <-- is Leaf 

Three node: address(0x1458ca0): key[1] = 2: parent[0x1458d20]->children[0]->keys[1] = 2 <-- is Leaf 

Two node:   address(0x1458e60): key[0] = 17: parent[0x1458d20]->children[1]->keys[0] = 17 <-- is Leaf 

Two node:   address(0x1458d20): key[0] = 15: parent[ root ]->children[0]->keys[0] = 15

Three node: address(0x1458ee0): key[0] = 26: parent[0x1458f20]->children[0]->keys[0] = 26 <-- is Leaf 

Three node: address(0x1458ee0): key[1] = 27: parent[0x1458f20]->children[0]->keys[1] = 27 <-- is Leaf 

Four node:  address(0x1458ce0): key[0] = 33: parent[0x1458f20]->children[1]->keys[0] = 33 <-- is Leaf 

Four node:  address(0x1458ce0): key[1] = 37: parent[0x1458f20]->children[1]->keys[1] = 37 <-- is Leaf 

Four node:  address(0x1458ce0): key[2] = 40: parent[0x1458f20]->children[1]->keys[2] = 40 <-- is Leaf 

Four node:  address(0x1458f20): key[0] = 70: parent[ root ]->children[1]->keys[0] = 70

Two node:   address(0x1458ea0): key[0] = 92: parent[0x1458f20]->children[2]->keys[0] = 92 <-- is Leaf 

Four node:  address(0x1458f20): key[1] = 90: parent[ root ]->children[1]->keys[1] = 90

Three node: address(0x1459060): key[0] = 100: parent[0x1458f20]->children[3]->keys[0] = 100 <-- is Leaf 

Three node: address(0x1459060): key[1] = 201: parent[0x1458f20]->children[3]->keys[1] = 201 <-- is Leaf 

Four node:  address(0x1458f20): key[2] = 97: parent[ root ]->children[1]->keys[2] = 97

Two node:   address(0x1459020): key[0] = 23: {Root}
