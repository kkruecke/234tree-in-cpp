TODO
====

Rewrote remove() code and added new method getRemoveSuccessor(), but I am getting unexpected problems with insert(): when the tree is printed level order, most of the keys/nodes are missing--yet I didn't
change the insert() code to my knowledge?

The new code is in include/new-tree234.h. There is a bug at convertTwoNode() below. See TODO comments.

template<typename Key, typename Value> bool tree234<Key, Value>::remove(Key key, const Node *current) 
{
   Node *pfound_node = nullptr;
   int key_index;
   int child_index;

   bool is_internal_node;

   // Search, looking for key, converting 2-nodes encountered into 3- or 4-nodes. After the conversion, the node is searched for the key and, if not found,
   // We continue down the tree. 
   while(true) {
              
       if (current->isTwoNode()) { 

           // If not the root, convert 2-nodes encountered while descending into 3- or 4-nodes... 
           // TODO: Bug due to trying to convert 2-node root. Is this o.k. Is converting the root part of the pseudocode for remove?
           current = convertTwoNode(const_cast<Node *>(current)); // ..and resume the key search with the now converted node.
       } 


Solution: Compare 

http://www.cs.ubc.ca/~liorma/cpsc320/files/B-trees.pdf

http://www.cs.toronto.edu/~krueger/cscB63h/lectures/tut04.txt

http://www2.thu.edu.tw/~emtools/Adv.%20Data%20Structure/2-3,2-3-4%26red-blackTree_952.pdf

with current code.
