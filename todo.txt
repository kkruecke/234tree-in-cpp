Test new remove(K key, Node234*) code in tree234.h, comparing out-old.txxt and old-new.txt. In the new version 79 disappears from tree after 60 is removed.
Sounds like it is orphaned.

TODOES/Thoughts
===============

1. Q: Are doRotation() and fuseSiblings() identical code? 

A: Work from high level pseudo code and working example here http://www.cs.ubc.ca/~liorma/cpsc320/files/B-trees.pdf. Also consult the working pseudo code and
example here http://www.cs.ubc.ca/~liorma/cpsc320/files/B-trees.pdf--but change the example to use an in-order successor rather than predecessor.

2. Q: Do I need to add or delete move ctor and move assignment to Node234 class? 
   A: No, the don't handle any resources. 

2. The code for

 template<typename K> bool Tree234<K>::remove(K key, Node234 *current)

code looks messy and confused, especially looking for the inorder successor. It relies on a check_if_key_moved flag to track whether the index of the in-order
successor has moved due to side effects of calling other member functions. This makes the code awfully messy. And it uses a prospective_in_order successor pointer
in a complex loop, again making it hard to read.


3. Should I consider a tree descend_iterator class to use in the implementation, and use it, say, for searching for a hit, etc?

 Usage:

DesentSearchIterator finder(root);

do { 

  if (finder->found())
         break; 
      
} while (finder->next() != nullptr && !finder->eof());

Any need for it?    
