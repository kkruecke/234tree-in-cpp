Bug
===

Prospective memory leak
-----------------------

The remove() code only calls unique_ptr<Node>::reset() in the case of the root. It should be calling reset() when the leaf node of the in order successor no longer has
any elements, too. The remove pseudo code (skipping the conversion of two nodes):

  1. "swap" in order successor with element to be deleted. To do this, we simply overright the element to be deleted with the in order successor and then...
  2. remove the in order successor value from the leaf node.
  3. We need to check if after the removal, the leaf node's totalItems() == 0.   

However, this will mean rewriting all of the remove() helper methods (and calls to them) to use unique_ptr<Node234>& instead of "Node234 *". It also means, if the code
depends on the parent link, which is a raw pinter, to navigate the tree upward, this probably won't work either now!

Another issue
-------------

1. Tree234<K>::size() does not seem to be working correctly.
2. Make a manipulator to do

ostream << level_order(tree) << in_order(tree) << post_order(tree) ... etc.

Sources
=======

  Implementation links:

1.  http://www.cs.ubc.ca/~liorma/cpsc320/files/B-trees.pdf

This link has an excellent working example. The explanation is thorough and clear. It gives several example of deleting elements. It uses the in-order predecessor
rather than the successor when deleting.

2.  www.serc.iisc.ernet.in/~viren/Courses/2009/SE286/2-3Trees-Mod.ppt  

This link has a excellent working example and discusses how delete works, using descent restructuring. It uses the swap-with-successor for deletion of internal keys.
It contains a working tree example. It shows that when converting 2-nodes, we first check if we can rotation else we do a merge (since both siblings are 2-nodes).

3.  http://www.cs.toronto.edu/~krueger/cscB63h/lectures/tut04.txt 

This link has excellent pseudo code for both insertion and deletion with working example. But it does not restructure the key on the way down instead from the
leaf upward.

4. http://web.njit.edu/~wl256/download/cs610/n1561011.pdf

This link has a more high level pseudo code. 

5. http://www2.thu.edu.tw/~emtools/Adv.%20Data%20Structure/2-3,2-3-4%26red-blackTree_952.pdf 

This link discusses both 2 3 trees and 2 3 4 trees. It has examples and pseudo code, but the deletion logic points out that the root only can be a two node--I think?

6.  http://www.unf.edu/~broggio/cop3540/Chapter%2010%20-%202-3-4%20Trees%20-%20Part%201.ppt

This link has actual **Java implementation code** for insertion and for 2 3 4 tree interface and node interface, including members.

